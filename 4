use iced::{
    alignment,
    widget::{button, row, text_input}, Element,
};

use crate::defaults::{DEFAULT_PADDING, DEFAULT_SPACING};

pub struct FileAddWidget {
    file_name: String,
}

#[derive(Debug, Clone)]
pub enum Message {
    FileNameUpdated(String),
    CancelAddFile,
    Submit,
}

pub enum Action {
    AddFile(String),
    None,
}

impl FileAddWidget {
    pub fn new() -> Self {
        Self {
            file_name: "".to_string(),
        }
    }

    pub fn update(&mut self, message: Message) -> Action {
        match message {
            Message::FileNameUpdated(name) => self.file_name = name,
            Message::Submit => return Action::AddFile(self.file_name.clone()),
            Message::CancelAddFile => println!("Cancel"),
        }
        Action::None
    }

    pub fn view(&self) -> iced::Element<Message> {
        let name_input =
            text_input("File name", &self.file_name).on_input(Message::FileNameUpdated);

        let submit_button = button("Submit file")
            .on_press_maybe((!self.file_name.is_empty()).then_some(Message::Submit));
        let cancel_button = button("Cancel").on_press(Message::CancelAddFile);
        row![name_input, submit_button, cancel_button]
            .spacing(DEFAULT_SPACING)
            .padding(DEFAULT_PADDING)
            .align_y(alignment::Vertical::Center)
            .into()
    }

    fn create_file_picker(&self) -> Element<Message> {
        let collection_file_type_picker = pick_list(
            vec![
                CollectionFileType::Rom,
                CollectionFileType::DiskImage,
                CollectionFileType::CoverScan,
                CollectionFileType::Manual,
                CollectionFileType::Screenshot,
                CollectionFileType::TapeImage,
            ],
            self.selected_file_type.clone(),
            Message::FileTypeSelected,
        );
        let add_file_button = button("Add File").on_press_maybe(
            (self.system_id.is_some() && self.selected_file_type.is_some())
                .then_some(Message::StartFileSelection),
        );
        row![collection_file_type_picker, add_file_button].into()
    }
}
